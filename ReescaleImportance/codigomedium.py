# -*- coding: utf-8 -*-
"""CodigoMedium.ipynb

Automatically generated by Colaboratory.

"""

# biblioteca para manipulação de dados
import pandas as pd

# biblioteca para computação numérica
import numpy as np

# biblioteca para carregar os dados do dataset
from sklearn.datasets import load_boston

# biblioteca para separar os dados em treino e teste
from sklearn.model_selection import train_test_split

# biblioteca para usar o modelo Support Vector Regression
from sklearn.svm import SVR

# biblioteca para calcular uma métrica do modelo
from sklearn.metrics import r2_score

# carregando o dataset "Boston house prices"
data = load_boston()
dataset = pd.DataFrame(data['data'], columns=data['feature_names'])
dataset['target'] = data['target']

# visualizando os primeiros valores
dataset.head()

"""Vamos colocar algumas colunas em uma escala diferente de valores, a fim de visualizar melhor o impacto da normalização"""

colunas = dataset.columns

# Padronizando os dados
from sklearn.preprocessing import StandardScaler
scaler_standard = StandardScaler() 
dataset_padronizado = pd.DataFrame(scaler_standard.fit_transform(dataset), columns=colunas)
dataset_padronizado.head()

# normalizando os dados
from sklearn.preprocessing import MinMaxScaler
scaler_minMax = MinMaxScaler() 
data_normalize = pd.DataFrame(scaler_minMax.fit_transform(dataset), columns=colunas)
data_normalize.head()

def ML_step(data):
  dataset_num_columns = data.shape[1]
  x = data.iloc[:, 0:dataset_num_columns-1]
  y = data['target']

  # separando em dados de treino e teste 
  X_train, X_test, y_train, y_test = train_test_split(x, 
                                                      y, 
                                                      test_size=0.30, 
                                                      random_state=12)
  
  # instanciando o modelo Support Vector Regression
  model = SVR()

  # treinando o modelo
  model.fit(X_train, y_train)

  # prevendo os valores
  y_predict = model.predict(X_test)

  # avaliando o modelo (quanto mais próximo de 1 melhor)
  print("r^2:", r2_score(y_test, y_predict))

print("Dataset não padronizado")
ML_step(dataset)

print("Dataset padronizado")
ML_step(dataset_padronizado)

print("Dataset normalizado")
ML_step(data_normalize)
